{"version":3,"sources":["serviceWorker.ts","models/HandEnum.ts","components/Header/index.tsx","models/ResultEnum.ts","components/PlayerBox/index.tsx","services/GameService.ts","utils/TitleUtil.ts","components/GameBody/index.tsx","App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","addEventListener","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","HandEnum","Header","className","ResultEnum","PlayerBox","props","useState","faQuestion","gestureIcon","setGestureIcon","useEffect","Gesture","Paper","faHandPaper","Scissors","faHandScissors","Rock","faHandRock","Name","Score","icon","Number","isNaN","WinRate","playerGesture","computerGesture","Draw","Computer","Player","Fail","enumValues","Object","values","filter","x","isInteger","Math","floor","random","length","DefaultTitle","status","document","title","setTimeout","Reset","GameBody","roundsCount","setRoundsCount","setPlayerGesture","setComputerGesture","playerScore","setPlayerScore","computerScore","setComputerScore","drawScore","setDrawScore","roundResult","setRoundResult","playerWinRate","setPlayerWinRate","computerWinRate","setComputerWinRate","drawPercentage","setDrawPercentage","showDebugInfo","setShowDebugInfo","onPlayerAction","playerInput","computerInput","GameService","ComputerPlay","CheckWin","round","TitleUtil","ChangeStatus","Button","onClick","color","style","padding","fontSize","faWrench","App","ReactDOM","render","StrictMode","getElementById","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8df270f0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n//\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.addEventListener('updatefound', () => {\r\n        const installingWorker = registration.installing;\r\n\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              // eslint-disable-next-line\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              // eslint-disable-next-line\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      // eslint-disable-next-line\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\n// only used when running on localhost\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      // eslint-disable-next-line\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  window.addEventListener('load', () => {\r\n    const swUrl = '/service-worker.js';\r\n\r\n    if (isLocalhost) {\r\n      // This is running on localhost. Let's check if a service worker still exists or not.\r\n      checkValidServiceWorker(swUrl, config);\r\n\r\n      // Add some additional logging to localhost, pointing developers to the\r\n      // service worker/PWA documentation.\r\n      navigator.serviceWorker.ready.then(() => {\r\n        // eslint-disable-next-line\r\n        console.log(\r\n          'This web app is being served cache-first by a service '\r\n            + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n        );\r\n      });\r\n    } else {\r\n      // Is not localhost. Just register service worker\r\n      registerValidSW(swUrl, config);\r\n    }\r\n  });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","export enum HandEnum {\r\n    Rock = 1,\r\n    Paper = 2,\r\n    Scissors = 3\r\n}","import React from 'react'\r\n\r\nimport './styles.css'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <p className=\"heading\">ROCK, PAPER, SCISSORS</p>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","export enum ResultEnum {\r\n    Draw,\r\n    Player,\r\n    Computer,\r\n    Fail\r\n}","import React, { useEffect, useState } from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faHandRock,\r\n    faHandScissors,\r\n    faHandPaper,\r\n    faQuestion,\r\n    IconDefinition,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { HandEnum } from '../../models/HandEnum';\r\n\r\nimport './styles.css';\r\n\r\ninterface PlayerBoxProps {\r\n    Name: string;\r\n    Gesture: HandEnum;\r\n    Score: number;\r\n    WinRate: number;\r\n}\r\n\r\nconst PlayerBox = (props: PlayerBoxProps) => {\r\n    const [gestureIcon, setGestureIcon] = useState<IconDefinition>(faQuestion);\r\n\r\n    useEffect(() => {\r\n        switch (props.Gesture) {\r\n            case HandEnum.Paper:\r\n                setGestureIcon(faHandPaper);\r\n                break;\r\n            case HandEnum.Scissors:\r\n                setGestureIcon(faHandScissors);\r\n                break;\r\n            case HandEnum.Rock:\r\n                setGestureIcon(faHandRock);\r\n                break;\r\n        }\r\n    }, [props]);\r\n\r\n    return (\r\n        <div className=\"PlayerBox\">\r\n            <p className=\"name\">{props.Name}'s Box</p>\r\n            <p className=\"score\">Score {props.Score}</p>\r\n            <div className=\"mainGesture\">\r\n                <FontAwesomeIcon icon={gestureIcon}/>\r\n            </div>\r\n            <p className=\"winRate\">WinRate {Number.isNaN(props.WinRate) ? 0 : props.WinRate}%</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PlayerBox;\r\n","import { HandEnum } from '../models/HandEnum';\r\nimport { ResultEnum } from '../models/ResultEnum';\r\n\r\nclass GameService {\r\n    CheckWin(playerGesture: HandEnum, computerGesture: HandEnum): ResultEnum {\r\n        if (playerGesture === computerGesture) {\r\n            return ResultEnum.Draw;\r\n        } else if (\r\n            computerGesture === HandEnum.Paper &&\r\n            playerGesture === HandEnum.Rock\r\n        ) {\r\n            return ResultEnum.Computer;\r\n        } else if (\r\n            computerGesture === HandEnum.Scissors &&\r\n            playerGesture === HandEnum.Paper\r\n        ) {\r\n            return ResultEnum.Computer;\r\n        } else if (\r\n            computerGesture === HandEnum.Rock &&\r\n            playerGesture === HandEnum.Scissors\r\n        ) {\r\n            return ResultEnum.Computer;\r\n        } else if (\r\n            playerGesture === HandEnum.Paper &&\r\n            computerGesture === HandEnum.Rock\r\n        ) {\r\n            return ResultEnum.Player;\r\n        } else if (\r\n            playerGesture === HandEnum.Scissors &&\r\n            computerGesture === HandEnum.Paper\r\n        ) {\r\n            return ResultEnum.Player;\r\n        } else if (\r\n            playerGesture === HandEnum.Rock &&\r\n            computerGesture === HandEnum.Scissors\r\n        ) {\r\n            return ResultEnum.Player;\r\n        }\r\n\r\n        // This won't ever be hit\r\n        return ResultEnum.Fail;\r\n    }\r\n\r\n    ComputerPlay(): any {\r\n        // Gets values of HandEnum\r\n        let enumValues = Object.values(HandEnum) as any[];\r\n\r\n        // Filters only values\r\n        enumValues = enumValues.filter((x) => Number.isInteger(x));\r\n\r\n        // Select random hand gesture from the array\r\n        let randomIndex = Math.floor(Math.random() * enumValues.length);\r\n        \r\n        return enumValues[randomIndex];\r\n    }\r\n}\r\n\r\nexport default new GameService();\r\n","const DefaultTitle = 'Rock, Paper, Scissors';\r\n\r\nclass TitleUtil {\r\n    ChangeStatus(status: string) {\r\n        document.title = `Winner: ${status} - ${DefaultTitle}`;\r\n        \r\n        //Reset to default if nothing happends for 2 seconds\r\n        setTimeout(() => {\r\n            this.Reset()\r\n        }, 2000);\r\n    }\r\n\r\n    Reset() {\r\n        document.title = DefaultTitle;\r\n    }\r\n}\r\n\r\nexport default new TitleUtil();\r\n","import React, { useState } from 'react';\r\n\r\nimport { Button } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faHandRock,\r\n    faHandScissors,\r\n    faHandPaper,\r\n    faWrench,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport PlayerBox from '../PlayerBox';\r\n\r\nimport { HandEnum } from '../../models/HandEnum';\r\nimport GameService from '../../services/GameService';\r\n\r\nimport './styles.css';\r\nimport TitleUtil from '../../utils/TitleUtil';\r\nimport { ResultEnum } from '../../models/ResultEnum';\r\n\r\nconst GameBody = () => {\r\n    const [roundsCount, setRoundsCount] = useState<number>(0);\r\n\r\n    const [playerGesture, setPlayerGesture] = useState<HandEnum>(0);\r\n    const [computerGesture, setComputerGesture] = useState<HandEnum>(0);\r\n\r\n    const [playerScore, setPlayerScore] = useState<number>(0);\r\n    const [computerScore, setComputerScore] = useState<number>(0);\r\n    const [drawScore, setDrawScore] = useState<number>(0);\r\n\r\n    const [roundResult, setRoundResult] = useState<ResultEnum>(ResultEnum.Fail);\r\n\r\n    const [playerWinRate, setPlayerWinRate] = useState<number>(0);\r\n    const [computerWinRate, setComputerWinRate] = useState<number>(0);\r\n\r\n    const [drawPercentage, setDrawPercentage] = useState<number>(0);\r\n\r\n    const [showDebugInfo, setShowDebugInfo] = useState<boolean>(false);\r\n\r\n    const onPlayerAction = (playerInput: HandEnum) => {\r\n        setPlayerGesture(playerInput);\r\n\r\n        let computerInput = GameService.ComputerPlay();\r\n        setComputerGesture(computerInput);\r\n\r\n        setRoundResult(GameService.CheckWin(playerGesture, computerGesture));\r\n\r\n        if (roundResult === ResultEnum.Player) {\r\n            setPlayerScore(playerScore + 1);\r\n        } else if (roundResult === ResultEnum.Computer) {\r\n            setComputerScore(computerScore + 1);\r\n        } else {\r\n            setDrawScore(drawScore + 1);\r\n        }\r\n\r\n        switch (roundResult) {\r\n            case ResultEnum.Player:\r\n                setPlayerScore(playerScore + 1);\r\n                break;\r\n            case ResultEnum.Computer:\r\n                setComputerScore(computerScore + 1);\r\n                break;\r\n            case ResultEnum.Draw:\r\n                setDrawScore(drawScore + 1);\r\n                break;\r\n            default:\r\n                console.log('Something went south!');\r\n                break;\r\n        }\r\n\r\n        // [Dispute Wins / (Dispute Wins + Dispute Losses)] * 100 = Win Rate\r\n        let playerWinRate = Math.round(\r\n            (playerScore / (computerScore + (roundsCount - playerScore))) * 100\r\n        );\r\n        let computerWinRate = Math.round(\r\n            (computerScore / (computerScore + (roundsCount - computerScore))) *\r\n                100\r\n        );\r\n        let drawPercentage = Math.round((drawScore / roundsCount) * 100);\r\n\r\n        setDrawPercentage(drawPercentage);\r\n        setPlayerWinRate(playerWinRate);\r\n        setComputerWinRate(computerWinRate);\r\n\r\n        setRoundsCount(roundsCount + 1);\r\n\r\n        // Set page title\r\n        TitleUtil.ChangeStatus(ResultEnum[roundResult]);\r\n\r\n        if (showDebugInfo) {\r\n            console.log('Gesture: ', HandEnum[playerInput]);\r\n            console.log(`Input: P ${playerGesture} C ${computerGesture}`);\r\n            console.log(\r\n                `Player: ${HandEnum[playerGesture]} vs Computer: ${\r\n                    HandEnum[computerGesture]\r\n                }: Winner ${roundResult ? 'Player' : 'Computer'}`\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"GameBox\">\r\n            <PlayerBox\r\n                Name={'Computer'}\r\n                Gesture={computerGesture}\r\n                Score={computerScore}\r\n                WinRate={computerWinRate}\r\n            ></PlayerBox>\r\n            <hr />\r\n            <p className=\"resultDisplay\">\r\n                Winner: {ResultEnum[roundResult]} | Draws:{' '}\r\n                {Number.isNaN(drawPercentage) ? 0 : drawPercentage}%\r\n            </p>\r\n            <hr />\r\n            <PlayerBox\r\n                Name={'Player'}\r\n                Gesture={playerGesture}\r\n                Score={playerScore}\r\n                WinRate={playerWinRate}\r\n            ></PlayerBox>\r\n            <div className=\"playerActions\">\r\n                <p className=\"roundCounter\">Rounds: {roundsCount}</p>\r\n                <Button\r\n                    className=\"playerActionButton\"\r\n                    onClick={() => onPlayerAction(HandEnum.Rock)}\r\n                    color=\"secondary\"\r\n                >\r\n                    <FontAwesomeIcon icon={faHandRock} />\r\n                </Button>\r\n                <Button\r\n                    className=\"playerActionButton\"\r\n                    onClick={() => onPlayerAction(HandEnum.Paper)}\r\n                    color=\"secondary\"\r\n                >\r\n                    <FontAwesomeIcon icon={faHandPaper} />\r\n                </Button>\r\n                <Button\r\n                    className=\"playerActionButton\"\r\n                    onClick={() => onPlayerAction(HandEnum.Scissors)}\r\n                    color=\"secondary\"\r\n                >\r\n                    <FontAwesomeIcon icon={faHandScissors} />\r\n                </Button>\r\n                <Button\r\n                    onClick={() => setShowDebugInfo(!showDebugInfo)}\r\n                    color=\"secondary\"\r\n                    style={{ padding: 5, fontSize: 15 }}\r\n                    title=\"Toggles console debug info...\"\r\n                >\r\n                    <FontAwesomeIcon icon={faWrench} />\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GameBody;\r\n","import React from 'react';\n\nimport Header from './components/Header';\nimport GameBody from './components/GameBody';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <Header></Header>\n      <GameBody></GameBody>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();"],"sourceRoot":""}